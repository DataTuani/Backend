generator client {
  provider = "prisma-client-js"
}

generator erd {
  provider = "prisma-erd-generator"
  output   = "./ERD/ERD.svg"
  }

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Usuario {
  id               Int            @id @default(autoincrement())
  primer_nombre    String
  segundo_nombre   String
  primer_apellido  String
  segundo_apellido String
  fecha_nacimiento DateTime
  genero           String
  telefono         String?
  correo           String         @unique
  contrase√±a      String
  direccion        String?
  cedula           String         @unique
  created_at       DateTime       @default(now())
  rol_id           Int
  foto_url         String?        @default("https://zwkidxtvznccwowtooik.supabase.co/storage/v1/object/public/Profile-Images/user.png")
  Notificacion     Notificacion[]
  Paciente         Paciente?
  Personal         Personal?
  rol              Rol            @relation(fields: [rol_id], references: [id])

  @@map("usuario")
}

model Rol {
  id       Int       @id @default(autoincrement())
  nombre   String    @unique
  usuarios Usuario[]

  @@map("rol")
}

model Paciente {
  id              Int                 @id @default(autoincrement())
  usuario_id      Int                 @unique
  grupo_sanguineo String?
  alergias        Alergia[]
  citas           Cita[]
  enfermedades    EnfermedadCronica[]
  expediente      Expediente?
  filaVirtual     FilaVirtual[]
  usuario         Usuario             @relation(fields: [usuario_id], references: [id])

  @@map("paciente")
}

model Personal {
  id              Int          @id @default(autoincrement())
  usuario_id      Int          @unique
  hospital_id     Int
  especialidad_id Int
  turnos          Turno[]
  citas           Cita[]
  especialidad    Especialidad @relation(fields: [especialidad_id], references: [id])
  hospital        Hospital     @relation(fields: [hospital_id], references: [id])
  usuario         Usuario      @relation(fields: [usuario_id], references: [id])

  @@map("personal")
}

model Turno {
  id          Int      @id @default(autoincrement())
  medico_id   Int
  hospital_id Int
  hora_inicio DateTime
  hora_fin    DateTime
  hospital    Hospital @relation(fields: [hospital_id], references: [id])
  medico      Personal @relation(fields: [medico_id], references: [id])
}

model Hospital {
  id          Int           @id @default(autoincrement())
  nombre      String
  direccion   String
  telefono    String?
  email       String?
  codigo      String        @unique @default("DEFAULT-CODIGO")
  turnos      Turno[]
  citas       Cita[]
  expediente  Expediente[]
  filaVirtual FilaVirtual[]
  personal    Personal[]

  @@map("hospital")
}

model Especialidad {
  id       Int        @id @default(autoincrement())
  nombre   String
  personal Personal[]

  @@map("especialidad")
}

model Cita {
  id              Int         @id @default(autoincrement())
  roomId          String?
  numero_turno    Int?
  paciente_id     Int
  medico_id       Int
  hospital_id     Int
  fecha_hora      DateTime
  estado_id       Int
  expediente_id   Int?
  motivo_consulta String?
  tipo_id         Int         @default(1)
  imagen_url      String?
  estado          Estado      @relation(fields: [estado_id], references: [id])
  expediente      Expediente? @relation(fields: [expediente_id], references: [id])
  hospital        Hospital    @relation(fields: [hospital_id], references: [id])
  medico          Personal    @relation(fields: [medico_id], references: [id])
  paciente        Paciente    @relation(fields: [paciente_id], references: [id])
  tipo            tipoCita    @relation(fields: [tipo_id], references: [id])
  consulta        Consulta?

  @@map("cita")
}

model tipoCita {
  id    Int    @id @default(autoincrement())
  tipo  String @unique
  citas Cita[]

  @@map("tipo_cita")
}

model Estado {
  id          Int                @id @default(autoincrement())
  nombre      String
  citas       Cita[]
  filaVirtual FilaVirtual[]
  ordenes     OrdenLaboratorio[]

  @@map("estado")
}

model Consulta {
  id            Int                   @id @default(autoincrement())
  cita_id       Int?                  @unique
  expediente_id Int
  diagnostico   String?
  created_at    DateTime              @default(now())
  sintomas      String?
  tratamiento   String?
  updated_at    DateTime              @updatedAt
  cita          Cita?                 @relation(fields: [cita_id], references: [id])
  expediente    Expediente            @relation(fields: [expediente_id], references: [id])
  receta        MedicamentoRecetado[]
  ordenes       OrdenLaboratorio[]
  // resultado_laboratorio resultado_laboratorio[]
  signos        SignosVitales[]

  @@map("consulta")
}

model MedicamentoRecetado {
  id            Int      @id @default(autoincrement())
  consulta_id   Int
  nombre        String
  dosis         String
  frecuencia    String
  duracion      String
  instrucciones String?
  consulta      Consulta @relation(fields: [consulta_id], references: [id])

  @@map("medicamento_recetado")
}

model OrdenLaboratorio {
  id            Int        @id @default(autoincrement())
  expediente_id Int
  consulta_id   Int
  tipo_examen   String
  instrucciones String?
  resultado_url String?
  estado_id     Int
  created_at    DateTime   @default(now())
  consulta      Consulta   @relation(fields: [consulta_id], references: [id])
  estado        Estado     @relation(fields: [estado_id], references: [id])
  expediente    Expediente @relation(fields: [expediente_id], references: [id])

  @@map("orden_laboratorio")
}

model Expediente {
  id             Int                @id @default(autoincrement())
  paciente_id    Int                @unique
  folio          String?
  fecha_apertura DateTime           @default(now())
  hospital_id    Int
  observaciones  String?
  Cita           Cita[]
  consultas      Consulta[]
  hospital       Hospital           @relation(fields: [hospital_id], references: [id])
  paciente       Paciente           @relation(fields: [paciente_id], references: [id])
  ordenLab       OrdenLaboratorio[]

  @@map("expediente")
}

model SignosVitales {
  id          Int      @id @default(autoincrement())
  consulta_id Int
  tipo        String
  valor       String
  consulta    Consulta @relation(fields: [consulta_id], references: [id])

  @@map("signos_vitales")
}

model EnfermedadCronica {
  id          Int      @id @default(autoincrement())
  paciente_id Int
  descripcion String
  paciente    Paciente @relation(fields: [paciente_id], references: [id])

  @@map("enfermedad_cronica")
}

model Alergia {
  id          Int      @id @default(autoincrement())
  paciente_id Int
  descripcion String
  paciente    Paciente @relation(fields: [paciente_id], references: [id])

  @@map("alergia")
}

model Notificacion {
  id         Int      @id @default(autoincrement())
  usuario_id Int
  titulo     String
  cita_id    Int?
  mensaje    String
  leida      Boolean  @default(false)
  fecha      DateTime
  usuario    Usuario  @relation(fields: [usuario_id], references: [id])

  @@map("notificacion")
}

model FilaVirtual {
  id              Int       @id @default(autoincrement())
  paciente_id     Int
  hospital_id     Int
  numero_turno    Int
  estado_id       Int
  hora_asignacion DateTime
  hora_estimacion DateTime?
  estado          Estado    @relation(fields: [estado_id], references: [id])
  hospital        Hospital  @relation(fields: [hospital_id], references: [id])
  paciente        Paciente  @relation(fields: [paciente_id], references: [id])

  @@map("fila_virtual")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
// model resultado_laboratorio {
//   id              Int        @id @default(autoincrement())
//   expediente_id   Int
//   consulta_id     Int
//   tipo_examen     String
//   archivo_url     String?
//   fecha_resultado DateTime
//   consulta        Consulta   @relation(fields: [consulta_id], references: [id])
//   expediente      Expediente @relation(fields: [expediente_id], references: [id])
// }
